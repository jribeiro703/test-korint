// This file is auto-generated by @hey-api/openapi-ts

export const ArticleSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        title: {
            type: 'string',
            maxLength: 250
        },
        url: {
            type: 'string',
            format: 'uri',
            maxLength: 200
        },
        image_url: {
            type: 'string',
            format: 'uri',
            maxLength: 500
        },
        news_site: {
            type: 'string',
            readOnly: true
        },
        summary: {
            type: 'string'
        },
        published_at: {
            type: 'string',
            format: 'date-time'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        featured: {
            type: 'boolean'
        },
        launches: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Launch'
            }
        },
        events: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Event'
            }
        }
    },
    required: ['events', 'id', 'image_url', 'launches', 'news_site', 'published_at', 'summary', 'title', 'updated_at', 'url']
} as const;

export const BlogSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        title: {
            type: 'string',
            maxLength: 250
        },
        url: {
            type: 'string',
            format: 'uri',
            maxLength: 200
        },
        image_url: {
            type: 'string',
            format: 'uri',
            maxLength: 500
        },
        news_site: {
            type: 'string',
            readOnly: true
        },
        summary: {
            type: 'string'
        },
        published_at: {
            type: 'string',
            format: 'date-time'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        featured: {
            type: 'boolean'
        },
        launches: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Launch'
            }
        },
        events: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Event'
            }
        }
    },
    required: ['events', 'id', 'image_url', 'launches', 'news_site', 'published_at', 'summary', 'title', 'updated_at', 'url']
} as const;

export const EventSchema = {
    type: 'object',
    properties: {
        event_id: {
            type: 'integer',
            maximum: 2147483647,
            minimum: -2147483648
        },
        provider: {
            type: 'string',
            readOnly: true
        }
    },
    required: ['event_id', 'provider']
} as const;

export const InfoSchema = {
    type: 'object',
    properties: {
        version: {
            type: 'string'
        },
        news_sites: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['news_sites', 'version']
} as const;

export const LaunchSchema = {
    type: 'object',
    properties: {
        launch_id: {
            type: 'string',
            format: 'uuid'
        },
        provider: {
            type: 'string',
            readOnly: true
        }
    },
    required: ['launch_id', 'provider']
} as const;

export const PaginatedArticleListSchema = {
    type: 'object',
    required: ['count', 'results'],
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?offset=400&limit=100'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?offset=200&limit=100'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Article'
            }
        }
    }
} as const;

export const PaginatedBlogListSchema = {
    type: 'object',
    required: ['count', 'results'],
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?offset=400&limit=100'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?offset=200&limit=100'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Blog'
            }
        }
    }
} as const;

export const PaginatedReportListSchema = {
    type: 'object',
    required: ['count', 'results'],
    properties: {
        count: {
            type: 'integer',
            example: 123
        },
        next: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?offset=400&limit=100'
        },
        previous: {
            type: 'string',
            nullable: true,
            format: 'uri',
            example: 'http://api.example.org/accounts/?offset=200&limit=100'
        },
        results: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Report'
            }
        }
    }
} as const;

export const ReportSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            readOnly: true
        },
        title: {
            type: 'string',
            maxLength: 250
        },
        url: {
            type: 'string',
            format: 'uri',
            maxLength: 200
        },
        image_url: {
            type: 'string',
            format: 'uri',
            maxLength: 200
        },
        news_site: {
            type: 'string',
            readOnly: true
        },
        summary: {
            type: 'string'
        },
        published_at: {
            type: 'string',
            format: 'date-time'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        }
    },
    required: ['id', 'image_url', 'news_site', 'published_at', 'title', 'updated_at', 'url']
} as const;