// This file is auto-generated by @hey-api/openapi-ts

export type Article = {
    readonly id: number;
    title: string;
    url: string;
    image_url: string;
    readonly news_site: string;
    summary: string;
    published_at: string;
    readonly updated_at: string;
    featured?: boolean;
    launches: Array<Launch>;
    events: Array<Event>;
};

export type Blog = {
    readonly id: number;
    title: string;
    url: string;
    image_url: string;
    readonly news_site: string;
    summary: string;
    published_at: string;
    readonly updated_at: string;
    featured?: boolean;
    launches: Array<Launch>;
    events: Array<Event>;
};

export type Event = {
    event_id: number;
    readonly provider: string;
};

export type Info = {
    version: string;
    news_sites: Array<(string)>;
};

export type Launch = {
    launch_id: string;
    readonly provider: string;
};

export type PaginatedArticleList = {
    count: number;
    next?: (string) | null;
    previous?: (string) | null;
    results: Array<Article>;
};

export type PaginatedBlogList = {
    count: number;
    next?: (string) | null;
    previous?: (string) | null;
    results: Array<Blog>;
};

export type PaginatedReportList = {
    count: number;
    next?: (string) | null;
    previous?: (string) | null;
    results: Array<Report>;
};

export type Report = {
    readonly id: number;
    title: string;
    url: string;
    image_url: string;
    readonly news_site: string;
    summary?: string;
    published_at: string;
    readonly updated_at: string;
};

export type ArticlesListData = {
    query?: {
        /**
         * Search for all documents related to a specific event using its Launch Library 2 ID.
         */
        event?: Array<(number)>;
        /**
         * Get all documents that have a related event.
         */
        has_event?: boolean;
        /**
         * Get all documents that have a related launch.
         */
        has_launch?: boolean;
        /**
         * Get all documents that are featured.
         */
        is_featured?: boolean;
        /**
         * Search for all documents related to a specific launch using its Launch Library 2 ID.
         */
        launch?: Array<(string)>;
        /**
         * Number of results to return per page.
         */
        limit?: number;
        /**
         * Search for documents with a news_site__name present in a list of comma-separated values. Case insensitive.
         */
        news_site?: string;
        /**
         * Search for documents with a news_site__name not present in a list of comma-separated values. Case insensitive.
         */
        news_site_exclude?: string;
        /**
         * The initial index from which to return the results.
         */
        offset?: number;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * Get all documents published after a given ISO8601 timestamp (excluded).
         */
        published_at_gt?: string;
        /**
         * Get all documents published after a given ISO8601 timestamp (included).
         */
        published_at_gte?: string;
        /**
         * Get all documents published before a given ISO8601 timestamp (excluded).
         */
        published_at_lt?: string;
        /**
         * Get all documents published before a given ISO8601 timestamp (included).
         */
        published_at_lte?: string;
        /**
         * Search for documents with a specific phrase in the title or summary.
         */
        search?: string;
        /**
         * Search for all documents with a specific phrase in the summary.
         */
        summary_contains?: string;
        /**
         * Search for documents with a summary containing all keywords from comma-separated values.
         */
        summary_contains_all?: string;
        /**
         * Search for documents with a summary containing at least one keyword from comma-separated values.
         */
        summary_contains_one?: string;
        /**
         * Search for all documents with a specific phrase in the title.
         */
        title_contains?: string;
        /**
         * Search for documents with a title containing all keywords from comma-separated values.
         */
        title_contains_all?: string;
        /**
         * Search for documents with a title containing at least one keyword from comma-separated values.
         */
        title_contains_one?: string;
        /**
         * Get all documents updated after a given ISO8601 timestamp (excluded).
         */
        updated_at_gt?: string;
        /**
         * Get all documents updated after a given ISO8601 timestamp (included).
         */
        updated_at_gte?: string;
        /**
         * Get all documents updated before a given ISO8601 timestamp (excluded).
         */
        updated_at_lt?: string;
        /**
         * Get all documents updated before a given ISO8601 timestamp (included).
         */
        updated_at_lte?: string;
    };
};

export type ArticlesListResponse = (PaginatedArticleList);

export type ArticlesListError = unknown;

export type ArticlesRetrieveData = {
    path: {
        /**
         * A unique integer value identifying this article.
         */
        id: number;
    };
};

export type ArticlesRetrieveResponse = (Article);

export type ArticlesRetrieveError = unknown;

export type BlogsListData = {
    query?: {
        /**
         * Search for all documents related to a specific event using its Launch Library 2 ID.
         */
        event?: Array<(number)>;
        /**
         * Get all documents that have a related event.
         */
        has_event?: boolean;
        /**
         * Get all documents that have a related launch.
         */
        has_launch?: boolean;
        /**
         * Get all documents that are featured.
         */
        is_featured?: boolean;
        /**
         * Search for all documents related to a specific launch using its Launch Library 2 ID.
         */
        launch?: Array<(string)>;
        /**
         * Number of results to return per page.
         */
        limit?: number;
        /**
         * Search for documents with a news_site__name present in a list of comma-separated values. Case insensitive.
         */
        news_site?: string;
        /**
         * Search for documents with a news_site__name not present in a list of comma-separated values. Case insensitive.
         */
        news_site_exclude?: string;
        /**
         * The initial index from which to return the results.
         */
        offset?: number;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * Get all documents published after a given ISO8601 timestamp (excluded).
         */
        published_at_gt?: string;
        /**
         * Get all documents published after a given ISO8601 timestamp (included).
         */
        published_at_gte?: string;
        /**
         * Get all documents published before a given ISO8601 timestamp (excluded).
         */
        published_at_lt?: string;
        /**
         * Get all documents published before a given ISO8601 timestamp (included).
         */
        published_at_lte?: string;
        /**
         * Search for documents with a specific phrase in the title or summary.
         */
        search?: string;
        /**
         * Search for all documents with a specific phrase in the summary.
         */
        summary_contains?: string;
        /**
         * Search for documents with a summary containing all keywords from comma-separated values.
         */
        summary_contains_all?: string;
        /**
         * Search for documents with a summary containing at least one keyword from comma-separated values.
         */
        summary_contains_one?: string;
        /**
         * Search for all documents with a specific phrase in the title.
         */
        title_contains?: string;
        /**
         * Search for documents with a title containing all keywords from comma-separated values.
         */
        title_contains_all?: string;
        /**
         * Search for documents with a title containing at least one keyword from comma-separated values.
         */
        title_contains_one?: string;
        /**
         * Get all documents updated after a given ISO8601 timestamp (excluded).
         */
        updated_at_gt?: string;
        /**
         * Get all documents updated after a given ISO8601 timestamp (included).
         */
        updated_at_gte?: string;
        /**
         * Get all documents updated before a given ISO8601 timestamp (excluded).
         */
        updated_at_lt?: string;
        /**
         * Get all documents updated before a given ISO8601 timestamp (included).
         */
        updated_at_lte?: string;
    };
};

export type BlogsListResponse = (PaginatedBlogList);

export type BlogsListError = unknown;

export type BlogsRetrieveData = {
    path: {
        /**
         * A unique integer value identifying this blog.
         */
        id: number;
    };
};

export type BlogsRetrieveResponse = (Blog);

export type BlogsRetrieveError = unknown;

export type InfoRetrieveResponse = (Info);

export type InfoRetrieveError = unknown;

export type ReportsListData = {
    query?: {
        /**
         * Number of results to return per page.
         */
        limit?: number;
        /**
         * Search for documents with a news_site__name present in a list of comma-separated values. Case insensitive.
         */
        news_site?: string;
        /**
         * Search for documents with a news_site__name not present in a list of comma-separated values. Case insensitive.
         */
        news_site_exclude?: string;
        /**
         * The initial index from which to return the results.
         */
        offset?: number;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * Get all documents published after a given ISO8601 timestamp (excluded).
         */
        published_at_gt?: string;
        /**
         * Get all documents published after a given ISO8601 timestamp (included).
         */
        published_at_gte?: string;
        /**
         * Get all documents published before a given ISO8601 timestamp (excluded).
         */
        published_at_lt?: string;
        /**
         * Get all documents published before a given ISO8601 timestamp (included).
         */
        published_at_lte?: string;
        /**
         * Search for documents with a specific phrase in the title or summary.
         */
        search?: string;
        /**
         * Search for all documents with a specific phrase in the summary.
         */
        summary_contains?: string;
        /**
         * Search for documents with a summary containing all keywords from comma-separated values.
         */
        summary_contains_all?: string;
        /**
         * Search for documents with a summary containing at least one keyword from comma-separated values.
         */
        summary_contains_one?: string;
        /**
         * Search for all documents with a specific phrase in the title.
         */
        title_contains?: string;
        /**
         * Search for documents with a title containing all keywords from comma-separated values.
         */
        title_contains_all?: string;
        /**
         * Search for documents with a title containing at least one keyword from comma-separated values.
         */
        title_contains_one?: string;
        /**
         * Get all documents updated after a given ISO8601 timestamp (excluded).
         */
        updated_at_gt?: string;
        /**
         * Get all documents updated after a given ISO8601 timestamp (included).
         */
        updated_at_gte?: string;
        /**
         * Get all documents updated before a given ISO8601 timestamp (excluded).
         */
        updated_at_lt?: string;
        /**
         * Get all documents updated before a given ISO8601 timestamp (included).
         */
        updated_at_lte?: string;
    };
};

export type ReportsListResponse = (PaginatedReportList);

export type ReportsListError = unknown;

export type ReportsRetrieveData = {
    path: {
        /**
         * A unique integer value identifying this report.
         */
        id: number;
    };
};

export type ReportsRetrieveResponse = (Report);

export type ReportsRetrieveError = unknown;